<%
  #TODO: spin off into separate helper file, add tests
  require 'duration'
  def render_percentile(data,timeframe, percentile)
    duration = Duration.new(data[timeframe]["duration_percentiles"]["p#{percentile}"])
    is_smallest = data.min_by{|k,v| v["duration_percentiles"]["p#{percentile}"] rescue 9999.week}.first == timeframe
    "<td><p#{' class="best"' if is_smallest}>#{format_duration(duration)}</p></td>"
  end
  def format_duration(duration)
    return "—" if duration == 0
    s = ""
    s += "#{duration.weeks}w " unless duration < 1.week
    s += "#{duration.days}d " unless duration > 4.week || duration < 1.day
    s += "#{duration.hours}h " unless duration > 1.week || duration < 1.hour
    s += "#{duration.minutes}m " unless duration > 6.hours || duration < 1.minute
    s += "#{duration.seconds}s" unless duration > 10.minutes
    s.strip
  end
  def closed_during_header(data,t)
    label = data[t]["name"] || t.sub('_', ' ').capitalize
    start = data[t]["start_time"] || "*"
    fin = data[t]["end_time"] || "*"
    url = "https://github.com/#{data["meta"]["owner"]}/#{data["meta"]["repo"]}/issues?q=closed%3A#{start}..#{fin}"
    "<td><a class='side' href='#{url}'>#{label}</a></td>"
  end
  this_week = data["this_week"]
%>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      table .best{
        font-weight: bold
      }

      #back{
        font-family: sans-serif;
        font-weight: lighter;
        font-size: 12px;
        text-decoration: none;
        color: #4183c4;
      }
      table a {
        font-family: sans-serif;
        font-weight: lighter;
        font-size: 14px;
        text-decoration: none;
        color: #4183c4;
      }
      table th, table .side{
        font-weight: lighter;
        font-size: 14px;
      }

      table .side, #closed_during{
        width: 115px;
      }
      table .side{
        text-align: right;
        margin: 2px 0px;
      }

      table th.table_spanner{
        font-style: italic;
        border-bottom: 1px solid #888;
        color: #888;
      }

      table td, table th.across{
        text-align: right;
        width: 80px;
      }
      table td p {
        margin: 0px;
      }

      h1 {
        font-weight: lighter;
        font-family: sans-serif;
        font-size: 36px;
        margin: 0px;
      }
      h2 {
        font-family: sans-serif;
        font-weight: lighter;
        font-size: 14px;
        margin-top: 0px;
        color: grey;
      }
      h3 {
        font-family: sans-serif;
        font-weight: lighter;
        margin: 0px;
        font-size: 18px;
      }

      p, th {
        font-family: sans-serif;
      }
      svg {
        margin-left: 16px;
      }

    svg .loading{
      font-family: sans-serif;
      font-size: 72px;
      fill: #888;
    }

    .axis {
      pointer-events:none;
    }

    svg text.label {
      font-family: sans-serif;
      font-size: 12px;
    }

    .axis text {
      font-family: sans-serif;
      font-size: 10px;
    }

    .axis path, .axis line {
      fill: none;
      stroke: #333;
      shape-rendering: crispEdges;
    }

    svg line{
      fill: none;
      stroke: #000;
      stroke-opacity: .4;
      shape-rendering: crispEdges;
    }

    svg line.extra{
      stroke: #F00;
      stroke-opacity: 1;
      stroke-width: 4px;
    }

    svg circle{
      fill: #333;
      opacity: 0.4;
    }

    svg circle.extra{
      fill: #F00;
      opacity: 1;
    }

    input.vertical {
      -webkit-appearance: slider-vertical; writing-mode: bt-lr;
      float:left;
      width: 0px;
      height: 300px;
    }
  </style>
  <script src="/ghdata/d3.v3.min.js"></script>
  <script src="/ghdata/queue.v1.min.js"></script>
</head>
<body>
  <div style="width:100%">
    <div style="float:left">
      <h1><%=data["meta"]["owner"]%> / <%=data["meta"]["repo"]%></h1>
      <h2><a id="back" href="/ghdata">« Back</a> Updated <%=Duration.new(Time.now - Time.at(data["meta"]["updated"])).format("%h %~h, %m %~m")%> ago</h2>
    </div>

      <p style="overflow: hidden; padding: 8px 16px;">
      Last week, <b><%=this_week["opened"]%></b> issues were opened, <b><%=this_week["opened_and_closed"]%></b> of which <%=this_week["opened_and_closed"] == 1 ? "has" : "have"%> since been closed.
      Of the <b><%=this_week["opened"] - this_week["opened_and_closed"]%></b> still open, <b><%=data["yesterday"]["opened"]%></b> <%=data["yesterday"]["opened"] == 1 ? "was" : "were"%> created in the last 24 hours.
      <b><%=older = this_week["closed"] - this_week["opened_and_closed"]; older == 0 ? "No" : older%></b> older issues were<%=" also" unless older == 0%> closed last week, leaving <b><%=data["now"]["open"]%></b> still open.
      </p>
    </div>
    <div style="width:100%; clear:both">
      <div style="float:left; width:500px; padding: 8px 16px">
        <h3>How long did issues stay open?</h3>
        <table>
        <thead>
          <tr>
            <th></th>
            <th colspan="4" class="table_spanner">Duration Open by Percentile</th>
          </tr>
          <tr>
            <th class="table_spanner" id="closed_during">Closed During</th>
            <th class="across">25</th>
            <th class="across"><small>(Median)</small> 50</th>
            <th class="across">75</th>
            <th class="across">90</th>
          </tr>
        </thead>
        <tbody>
          <% data["meta"]["table_rows"].each do |t|%>
            <tr>
              <%=closed_during_header(data,t)%>
              <%data["meta"]["percentiles"].each do |i|%>
                <%=render_percentile(data, t, i)%>
              <%end%>
              </tr>
          <%end%>
        </tbody>
      </table>
    </div>


      <div style="overflow: hidden; padding: 8px 16px;">
      <h3>How long have issues been open?</h3>
      <table>
        <thead>
          <tr>
            <th></th>
            <th colspan="2" class="table_spanner">Count</th>
            <th colspan="2" class="table_spanner">Comment Count</th>
          </tr>
          <tr>
            <th class="table_spanner">Opened During</th>
            <th class="across">Issues</th>
            <th class="across">PRs</th>
            <th class="across">Median</th>
            <th class="across">Max</th>
          </tr>
        </thead>
        <tbody>
          <% data["meta"]["table_rows"].each do |t|%>
            <tr>
              <th class="side">
                <%= data[t]["name"] || t.sub('_', ' ').capitalize %>
              </th>
              <td><p><%= data[t]["opened_issues"] || 0%></p></td>
              <td><p><%= data[t]["opened_pulls"] || 0%></p></td>
              <td><p><%= data[t]["comments_median"] || 0%></p></td>
              <td><p><%= data[t]["comments_max"] || 0%></p></td>
            </tr>
          <%end%>
        </tbody>
      </table>
      </div>

    </div>
    <div id="line_plot">
      <h3 style="padding-left: 16px;">How many issues were open on a given date?</h3>
      <svg></svg>
    </div>
    <div id="bar_plot">
      <h3 style="padding-left: 16px;">How long did issues created on a given date stay open?</h3>
      <input id="bar_plot_slider" type=range min=864000 class=vertical orient=vertical oninput="redrawBars(value)">
      <svg></svg>
    </div>
  </div>
  </body>
</html>
<script>
  var w = 1000;
  var h =  260;
  var marginH = 40;

  var x = d3.time.scale()
    .range([marginH, marginH+w])
  var y1 = d3.scale.linear()
    .range([h,10])
  var y2 = d3.scale.linear()
    .range([h,10])

  var xAxis = d3.svg.axis()
      .scale(x)
      .tickFormat(d3.time.format("%m/%y"));
  var yAxis1 = d3.svg.axis()
      .scale(y1)
      .orient("left");
  var yAxis2 = d3.svg.axis()
      .scale(y2)
      .orient("left")
      .tickFormat(function(d){return d3.format(",.0f")(d/86400)})

  var svg1 = d3.select("div#line_plot svg")
      .attr("width", (marginH*2 + w) + "px")
      .attr("height", 50+h+"px")
      .on("mouseleave", svgClear)
  svg1.append("text")
    .text("LOADING")
    .attr("text-anchor", "middle")
    .attr("class", "loading")
    .attr("transform", "translate("+((w+marginH)/2)+","+(2*h/3)+")")
  svg1.append("text")
    .text("Number of issues open")
    .attr("text-anchor", "middle")
    .attr("class", "label")
    .attr("transform", "translate(10,"+(h/2)+"), rotate(-90)")
  svg1.append("text")
    .text("Date")
    .attr("text-anchor", "middle")
    .attr("class", "label")
    .attr("transform", "translate("+(marginH+w/2)+","+(h+30)+")")

  var svg2 = d3.select("div#bar_plot svg")
      .attr("width", (marginH*2 + w) + "px")
      .attr("height", 50+h+"px")
      .on("mouseleave", svgClear)
  svg2.append("text")
    .text("LOADING")
    .attr("text-anchor", "middle")
    .attr("class", "loading")
    .attr("transform", "translate("+((w+marginH)/2)+","+(2*h/3)+")")
  svg2.append("text")
    .text("Days issue was open")
    .attr("text-anchor", "middle")
    .attr("class", "label")
    .attr("transform", "translate(10,"+(h/2)+"), rotate(-90)")
  svg2.append("text")
    .text("Date issue was opened")
    .attr("text-anchor", "middle")
    .attr("class", "label")
    .attr("transform", "translate("+(marginH+w/2)+","+(h+30)+")")

  function svgClear(){
    svg1.selectAll("circle.extra").classed("extra", null).attr("r", 1).style("fill", null);
    svg2.selectAll(".extra").remove();
  }

  queue()
    .defer(d3.csv,
      <%="\"/ghdata/data/#{data["meta"]["owner"]}_#{data["meta"]["repo"]}_issues_open.csv\""%>,
      function(d){return {timestamp: new Date(+d.timestamp*1000), count: +d.count, open: d.opening == "true", number: +d.number, title: d.title}}
    )
    .defer(d3.csv,
      <%="\"/ghdata/data/#{data["meta"]["owner"]}_#{data["meta"]["repo"]}_durations.csv\""%>,
      function(d){return {timestamp: new Date(+d.timestamp*1000), duration: +d.duration, is_pr: d.is_pr == "true", number: +d.number, title: d.title}}
    ).await(function(error, open_at_time, durs) {
    if(error){return console.log(error);}
    d3.selectAll(".loading").remove();

    x.domain(d3.extent(open_at_time, function(d){return d.timestamp}));
    y1.domain([0, d3.max(open_at_time, function(d){return d.count})]);
    y2.domain([0, d3.max(durs, function(d){return d.duration})]);

    svg1.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0,"+ h +")")
      .call(xAxis);
    svg1.append("g")
      .attr("class", "y axis")
      .attr("transform", "translate("+marginH+",0)")
      .call(yAxis1);

    svg1.selectAll("circle")
      .data(open_at_time)
      .enter()
      .append("circle")
      .attr("cx", function(d) { return x(d.timestamp) })
      .attr("cy", function(d) { return y1(d.count) })
      .attr("r", 1)
      .on("mouseover", function(d1){
        svgClear();
        svg1.append("circle")
          .attr("class", "extra")
          .attr("cx", function() { return x(d1.timestamp) })
          .attr("cy", function() { return y1(d1.count) })
          .attr("r", 5)
          .style("fill", d1.open ? "#0F0" : null);
        svg2.selectAll(".duration")
          .filter(function(d2){return d1 && d2 && d1.number == d2.number})
          .each(function(d2){
            if (d2.duration < maxY){
              svg2.append("line")
                .attr("class", "extra")
                .attr("x1", x(d2.timestamp))
                .attr("x2", x(d2.timestamp))
                .attr("y1", y2(d2.duration))
                .attr("y2", y2(0));
            }else{
              svg2.append("circle")
                .attr("class", "extra")
                .attr("cx", x(d2.timestamp))
                .attr("cy", y2(maxY) + 4)
                .attr("r", 4);
            }
          })
      });

      d3.select("#bar_plot_slider")
      .style("height", h + "px")
      .attr("max", y2.domain()[1])
      .attr("value", y2.domain()[1])

      svg2.style("margin-left", 12)
      svg2.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0,"+ h +")")
        .call(xAxis);
      svg2.append("g")
        .attr("class", "y axis")
        .attr("transform", "translate("+marginH+",0)")
        .call(yAxis2);

      durations = durs; // save for later
      redrawBars(y2.domain()[1])
    });

    function redrawBars(mY){
      maxY = mY // save for later
      if (!durations){return}
      svgClear();
      y2.domain([0, maxY]);
      svg2.select("g.y.axis")
        .call(yAxis2);

      svg2.selectAll(".duration").remove()
      svg2.selectAll("nonexistant")
        .data(durations.filter(function(d){return d.duration <= maxY}))
        .enter()
        .append("line")
        .attr("class", "duration")
        .attr("svg:title", function(d){ return d.number })
        .attr("x1", function(d) { return x(d.timestamp) })
        .attr("x2", function(d) { return x(d.timestamp) })
        .attr("y1", function(d) { return y2(d.duration) })
        .attr("y2", y2(0))
        .on("mouseover", function(d2){
          svgClear();
          svg1.selectAll("circle")
            .filter(function(d1){return d1 && d2 && d1.number == d2.number})
            .each(function(d1){
              svg1.append("circle")
                .attr("class", "extra")
                .attr("cx", function() { return x(d1.timestamp) })
                .attr("cy", function() { return y1(d1.count) })
                .attr("r", 5)
                .style("fill", d1.open ? "#0F0" : null)
              });
          svg2.append("line")
            .attr("class", "extra")
            .attr("x1", x(d2.timestamp))
            .attr("x2", x(d2.timestamp))
            .attr("y1", y2(d2.duration))
            .attr("y2", y2(0));
        });

      svg2.selectAll("nonexistant")
        .data(durations.filter(function(d){return d.duration > maxY}))
        .enter()
        .append("circle")
        .attr("class", "duration")
        .attr("svg:title", function(d){ return d.number })
        .attr("cx", function(d) { return x(d.timestamp) })
        .attr("cy", y2(maxY) + 4)
        .attr("r", 2)

    }

</script>
