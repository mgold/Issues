<%
  #TODO: spin off into separate helper file, add tests
  require 'duration'
  def render_percentile(data,timeframe, percentile)
    duration = Duration.new(data[timeframe]["duration_percentiles"]["p#{percentile}"])
    is_smallest = data.min_by{|k,v| v["duration_percentiles"]["p#{percentile}"] rescue 9999.week}.first == timeframe
    "<td><p#{' class="best"' if is_smallest}>#{format_duration(duration)}</p></td>"
  end
  def format_duration(duration)
    return "â€”" if duration == 0
    s = ""
    s += "#{duration.weeks}w " unless duration < 1.week
    s += "#{duration.days}d " unless duration > 4.week || duration < 1.day
    s += "#{duration.hours}h " unless duration > 1.week || duration < 1.hour
    s += "#{duration.minutes}m " unless duration > 6.hours || duration < 1.minute
    s += "#{duration.seconds}s" unless duration > 10.minutes
    s.strip
  end
  this_week = data["this_week"]
%>
<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="stylesheet" type="text/css" href="/ghdata/bootstrap.min.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      table.table p.best{
        font-weight: bold
      }
    </style>
    <link rel="stylesheet" type="text/css" href="nv.d3.min.css" />
    <script src="d3.v3.min.js"></script>
    <script src="queue.v1.min.js"></script>
    <script src="nv.d3.min.js"></script>
  </head>
  <body>
    <h1><%=data["meta"]["owner"]%> / <%=data["meta"]["repo"]%></h1>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8">
          <p>
          Lask week, <%=this_week["opened"]%> issues were opened, <%=this_week["opened_and_closed"]%> of which have since been closed.
          Of the <%=this_week["opened"] - this_week["opened_and_closed"]%> still open, <%=data["yesterday"]["opened"]%> <%=data["yesterday"]["opened"] == 1 ? "was" : "were"%> created in the last 24 hours.
          <%=older = this_week["closed"] - this_week["opened_and_closed"]; older == 0 ? "No" : older%> older issues were<%=" also" unless older == 0%> closed last week, leaving <%=data["now"]["open"]%> still open.
          </p>
        </div>
        <div class="col-md-2"></div>
      </div>
      <div class="row">

        <table class="table">
          <thead>
            <tr>
              <th>Closed during</th>
              <th>25</th>
              <th>50 (Median)</th>
              <th>75</th>
              <th>90</th>
            </tr>
          </thead>
          <tbody>
            <% %w(this_week last_week last_month).each do |t|%>
              <%="<tr>"%>
                <%="<td>#{data[t]["name"] || t.sub('_', ' ').capitalize}</td>"%>
                <%data["meta"]["percentiles"].each do |i|%>
                  <%=render_percentile(data, t, i)%>
                <%end%>
              <%="</tr>"%>
            <%end%>
          </tbody>
        </table>

      </div>
    </div>
    <div id="line_plot"><svg></svg></div>
  </body>
</html>
<script>
  d3.csv(<%="data/#{data["meta"]["owner"]}_#{data["meta"]["repo"]}.csv"%>,
  //function(d){return {x: +d.timestamp, y: +d.open_issues, shape: 'circle', open: d.open == "true", number: +d.number, title: d.title}},
  function(d){return {x: +d.timestamp, y: +d.count, shape: 'circle', open: d.opening == "true", number: +d.number, title: d.title}},
  function(error, data) {
    if(error){return console.log(error);}

    var grouped = [{key: "opened", values: []}, {key: "closed", values: []}]
    for(var i = 0; i < data.length; i++){
      var item = data[i]
      var idx = item.open ? 0 : 1
      grouped[idx].values.push(item)
    }
    nv.addGraph(function() {
      var chart = nv.models.scatterChart()
      .transitionDuration(350)
      .color(d3.scale.category10().range());

      //Configure how the tooltip looks.
      chart.tooltipContent(function(_,_,_,obj) {
        var point = obj.point
        return '<h3>' + point.number + ': ' + point.title + '</h3>';
      });

      //Axis settings
      chart.xAxis.tickFormat(function (t){return d3.time.format('%x')(new Date(1000*t))})
      chart.yAxis.tickFormat(d3.format('2'));

      d3.select('div#line_plot svg')
      .datum(grouped)
      .call(chart);

      nv.utils.windowResize(chart.update);

      return chart;
    });

  });

</script>
